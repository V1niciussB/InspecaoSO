/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package login;

import com.github.britooo.looca.api.core.Looca;
import com.github.britooo.looca.api.group.discos.DiscoGrupo;
import com.github.britooo.looca.api.group.dispositivos.DispositivoUsb;
import com.github.britooo.looca.api.group.dispositivos.DispositivosUsbGrupo;
import com.github.britooo.looca.api.group.memoria.Memoria;
import com.github.britooo.looca.api.group.processador.Processador;
import com.github.britooo.looca.api.group.sistema.Sistema;
import conexao.JDBC.Componente;
import java.awt.Color;
import java.sql.ResultSet;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import looca.Coletor;
import conexao.JDBC.Conexao;
import conexao.JDBC.ConfiguracaoComponente;
import conexao.JDBC.Empresa;
import conexao.JDBC.EnviaDados;
import conexao.JDBC.InfoMaquina;
import conexao.JDBC.Maquina;
import conexao.JDBC.RegistroAtividade;
import conexao.JDBC.Usb;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.time.LocalDate;
import java.util.Calendar;
import oshi.hardware.UsbDevice;

/**
 *
 * @author vitor
 */
public class LoginJframe extends javax.swing.JFrame {

    /**
     * Creates new form LoginJframe
     */
    public LoginJframe() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/assets/logoIc.png")).getImage());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Bacckground = new javax.swing.JPanel();
        jFundoAzul = new javax.swing.JPanel();
        jLogo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLoginTitulo = new javax.swing.JLabel();
        jLabelSenha = new javax.swing.JLabel();
        jLabelPatrimonio = new javax.swing.JLabel();
        btnLogar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        txtPatrimonio = new javax.swing.JTextField();
        txtSenha = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Bacckground.setBackground(new java.awt.Color(255, 255, 255));
        Bacckground.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jFundoAzul.setBackground(new java.awt.Color(0, 32, 79));
        jFundoAzul.setForeground(new java.awt.Color(255, 255, 255));

        jLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/logo.png"))); // NOI18N

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/icon.png"))); // NOI18N

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jFundoAzulLayout = new javax.swing.GroupLayout(jFundoAzul);
        jFundoAzul.setLayout(jFundoAzulLayout);
        jFundoAzulLayout.setHorizontalGroup(
            jFundoAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFundoAzulLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLogo)
                .addGap(18, 18, 18))
            .addGroup(jFundoAzulLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFundoAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE))
                .addContainerGap())
        );
        jFundoAzulLayout.setVerticalGroup(
            jFundoAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFundoAzulLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLogo)
                .addGap(62, 62, 62)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Bacckground.add(jFundoAzul, new org.netbeans.lib.awtextra.AbsoluteConstraints(491, 0, 330, 500));

        jLoginTitulo.setBackground(new java.awt.Color(0, 0, 0));
        jLoginTitulo.setFont(new java.awt.Font("Roboto Black", 1, 36)); // NOI18N
        jLoginTitulo.setForeground(new java.awt.Color(0, 0, 0));
        jLoginTitulo.setText("Login");
        Bacckground.add(jLoginTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, -1, -1));

        jLabelSenha.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabelSenha.setForeground(new java.awt.Color(0, 0, 0));
        jLabelSenha.setText("Senha");
        Bacckground.add(jLabelSenha, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, -1, -1));

        jLabelPatrimonio.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabelPatrimonio.setForeground(new java.awt.Color(0, 0, 0));
        jLabelPatrimonio.setText("Patrim√¥nio ");
        Bacckground.add(jLabelPatrimonio, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, -1, -1));

        btnLogar.setBackground(new java.awt.Color(0, 25, 61));
        btnLogar.setForeground(new java.awt.Color(255, 255, 255));
        btnLogar.setText("Logar");
        btnLogar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLogar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogarActionPerformed(evt);
            }
        });
        Bacckground.add(btnLogar, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 340, 340, 35));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Bacckground.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 500, 0));

        txtPatrimonio.setBackground(new java.awt.Color(255, 255, 255));
        txtPatrimonio.setForeground(new java.awt.Color(0, 0, 0));
        txtPatrimonio.setCaretColor(new java.awt.Color(0, 32, 79));
        txtPatrimonio.setDisabledTextColor(new java.awt.Color(0, 32, 79));
        txtPatrimonio.setSelectedTextColor(new java.awt.Color(255, 255, 255));
        txtPatrimonio.setSelectionColor(new java.awt.Color(0, 32, 79));
        Bacckground.add(txtPatrimonio, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, 340, 35));

        txtSenha.setBackground(new java.awt.Color(255, 255, 255));
        txtSenha.setForeground(new java.awt.Color(0, 0, 0));
        txtSenha.setCaretColor(new java.awt.Color(0, 32, 79));
        txtSenha.setDisabledTextColor(new java.awt.Color(0, 32, 79));
        txtSenha.setSelectedTextColor(new java.awt.Color(255, 255, 255));
        txtSenha.setSelectionColor(new java.awt.Color(0, 32, 79));
        Bacckground.add(txtSenha, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 280, 340, 35));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Bacckground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Bacckground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogarActionPerformed
        // TODO add your handling code here:
// TODO add your handling code here:

        try {
            // Objetos JDBC
            Conexao conexao = new Conexao();

            JdbcTemplate conMysql = conexao.getConnection();
            JdbcTemplate conAzure = conexao.getConnectionAzu();
            // Objetos Entidades
            InfoMaquina infoMaquina = new InfoMaquina();
            RegistroAtividade registroAtividade = new RegistroAtividade();
            Usb usb = new Usb();
            Componente componente = new Componente();
            ConfiguracaoComponente configComponente = new ConfiguracaoComponente();

            // Objetos  Looca
            Looca looca = new Looca();
            Sistema sistema = looca.getSistema();
            Memoria memoria = looca.getMemoria();
            DiscoGrupo grupoDeDiscos = looca.getGrupoDeDiscos();
            Processador processador = looca.getProcessador();

            String patrimonio_maquina = txtPatrimonio.getText();
            String senha_maquina = txtSenha.getText();

            Maquina maquina = new Maquina(patrimonio_maquina, senha_maquina);// Adicionado Construtor na classe m√°quina

            UsuarioDAO objUsuarioDAO = new UsuarioDAO();// Executa-se a consulta ao banco referente ao m√©todo para instanciar objeto Maquina que servir√° ara autentica√ß√£o;
            ResultSet rsusariodao = objUsuarioDAO.autenticsacaoUsuario(maquina);// Nesta linha √© instanciado objeto com par√¢metros provenientes da consulta com a Azure

            if (rsusariodao.next()) {
                //lOGADO
                ImageIcon icon = new ImageIcon(getClass().getResource("/assets/verificado.png"));
                JOptionPane.showMessageDialog(null, "Login realizado!",
                        "Seja Bem-Vindo!", JOptionPane.INFORMATION_MESSAGE, icon);

//              // Cadastro empresa
//              Empresa empresa = new Empresa();
                maquina.setIdEmpresa(rsusariodao.getInt("idEmpresa"));
                maquina.setRazaoSocial(rsusariodao.getString("razaoSocial"));
                maquina.setCNPJ(rsusariodao.getString("CNPJ"));
                maquina.setEmail(rsusariodao.getString("email"));
                maquina.setTel(rsusariodao.getString("tel"));

                // Cadastro Maquina
                //Set do nome no objeto ap√≥s a conex√£o
                maquina.setNomeUsuario(rsusariodao.getString("nomeDoUsuario"));
                maquina.setFkEmpresa(rsusariodao.getInt("idEmpresa"));
                maquina.setIdMaquina(rsusariodao.getInt("idMaquina"));

                // Tratamento de dados da tabela  InfoMaquina
                // Tamanho Total Disco
                Long tamanhoTotalDisco = grupoDeDiscos.getTamanhoTotal();
                String tamanhoTotalFormatadoDisco = String.valueOf(tamanhoTotalDisco).substring(0, 3);
                // Tamanho Memoria Total
                Long tamanhoTotalMemoria = memoria.getTotal();
                String tamanhoTotalFormatadoMemoria = String.valueOf(tamanhoTotalMemoria).substring(0, 2);

                List<Empresa> listadeEmpresa = conMysql.query("select * from Empresa where idEmpresa = ?",
                        new BeanPropertyRowMapper(Empresa.class), rsusariodao.getInt("idEmpresa"));// informa√ß√µes extra√≠das da consulta sqlserver realizadas em usuario DAO, preenchendo o bean property  com um construtor vazio dispon√≠vel para receber o objeto espec√≠fico do servidor.
                if (listadeEmpresa.isEmpty()) {
                    // Inset tabela Empresa
                    conMysql.update("INSERT INTO Empresa (idEmpresa, razaoSocial, CNPJ, email, tel) VALUES (?,?,?,?,?)",
                            maquina.getIdEmpresa(),
                            maquina.getRazaoSocial(),
                            maquina.getCNPJ(),
                            maquina.getEmail(),
                            maquina.getTel());

                }

                List<Maquina> listaDeMaquina1 = conMysql.query("select * from Maquina where idMaquina = ?",
                        new BeanPropertyRowMapper(Maquina.class), rsusariodao.getInt("idMaquina"));
                if (listaDeMaquina1.isEmpty()) {
//                  Lembrando que o objeto maquina possu√≠ dados relativos √†s credenciais constatadas no banco sql server...
                    // Inset tabela Maquina
                    conMysql.update("INSERT INTO Maquina (idMaquina, nomeDoUsuario, patrimonio, senha, fkEmpresa) VALUES (?,?,?,?,?)",
                            maquina.getIdMaquina(),
                            maquina.getNomeUsuario(),
                            maquina.getPatrimonio(),
                            maquina.getSenha(),
                            maquina.getFkEmpresa());
                }

//                 Condicional para exist√™ncia de dados repetitivos.
                List<Maquina> listaDeMaquina = conMysql.query("select * from InfoMaquina where fkMaquina = ?",
                        new BeanPropertyRowMapper(Maquina.class), rsusariodao.getInt("idMaquina"));
                if (listaDeMaquina.isEmpty()) {
                    conMysql.update("insert into InfoMaquina (sistemaoperacional, fabricante, arquitetura, nomeProcessador, capacidadeRam, capacidadeDisco, fkmaquina, fkempresa) values (?,?,?,?,?,?,?,?)",
                            sistema.getSistemaOperacional(),
                            sistema.getFabricante(),
                            sistema.getArquitetura(),
                            processador.getNome(),
                            tamanhoTotalFormatadoMemoria,
                            tamanhoTotalFormatadoDisco,
                            maquina.getIdMaquina(),
                            maquina.getFkEmpresa());
                    conAzure.update("insert into InfoMaquina (sistemaoperacional, fabricante, arquitetura, nomeProcessador, capacidadeRam, capacidadeDisco, fkmaquina, fkempresa) values (?,?,?,?,?,?,?,?)",
                            sistema.getSistemaOperacional(),
                            sistema.getFabricante(),
                            sistema.getArquitetura(),
                            processador.getNome(),
                            tamanhoTotalFormatadoMemoria,
                            tamanhoTotalFormatadoDisco,
                            maquina.getIdMaquina(),
                            maquina.getFkEmpresa());

                } else {
                    conMysql.update("update InfoMaquina set sistemaoperacional=?, fabricante=?, arquitetura=?, nomeProcessador=?, capacidadeRam=?, capacidadeDisco=? where fkmaquina=?",
                            sistema.getSistemaOperacional(),
                            sistema.getFabricante(),
                            sistema.getArquitetura(),
                            processador.getNome(),
                            tamanhoTotalFormatadoMemoria,
                            tamanhoTotalFormatadoDisco,
                            maquina.getIdMaquina());
                    conAzure.update("update InfoMaquina set sistemaoperacional=?, fabricante=?, arquitetura=?, nomeProcessador=?, capacidadeRam=?, capacidadeDisco=? where fkmaquina=?",
                            sistema.getSistemaOperacional(),
                            sistema.getFabricante(),
                            sistema.getArquitetura(),
                            processador.getNome(),
                            tamanhoTotalFormatadoMemoria,
                            tamanhoTotalFormatadoDisco,
                            maquina.getIdMaquina());
                }

                // Tratamento dados getTempoDeAtividade da tabela RegistroAtividade
//                Long segundos = sistema.getTempoDeAtividade();
//                LocalTime tempo = LocalTime.ofSecondOfDay(segundos.longValue());
//                String tempoFormatado = tempo.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
                // Inset tabela Usb
                DispositivosUsbGrupo dispositivos = looca.getDispositivosUsbGrupo();

                List<DispositivoUsb> dispositivosConectados = dispositivos.getDispositivosUsbConectados();

                for (DispositivoUsb dispositivo : dispositivosConectados) {
                    usb.setNome(dispositivo.getNome());
                    usb.setFornecedor(dispositivo.getForncecedor());
                    conMysql.update("INSERT INTO Usb (nome,fornecedor,fkmaquina,fkEmpresa) VALUES (?,?,?,?)",
                            usb.getNome(),
                            usb.getFornecedor(),
                            maquina.getIdMaquina(),
                            maquina.getFkEmpresa()
                    );
                }

                // Insert Tabela RegistroAtividade
                LocalDate dataAtual = LocalDate.now();
                conMysql.update("insert into RegistroAtividade(fkEmpresa, fkmaquina, inicializado, tempoDeAtividade) values (?,?,?,?)",
                        maquina.getFkEmpresa(),
                        maquina.getIdMaquina(),
                        sistema.getInicializado(),
                        dataAtual
                );

                // Insert Tabela ConfiguracaoComponente cpu
                //set 1
                componente.setIdComponente(1);
                configComponente.setUnidadeMedida("GB");
                //insert
                conMysql.update("insert into ConfiguracaoComponente(fkMaquina, fkEmpresa, FkComponente,capacidade,unidadeMedida) values (?,?,?,?,?)",
                        maquina.getIdMaquina(),
                        maquina.getFkEmpresa(),
                        componente.getIdComponente(),
                        tamanhoTotalFormatadoDisco,
                        configComponente.getUnidadeMedida()
                );

                // Insert Tabela ConfiguracaoComponente Processador
                //Tratando Dados
                componente.setIdComponente(2);
                Long frequenciaLong = processador.getFrequencia();
                Integer frequenciaInteger = (frequenciaLong.intValue() / 1000000000);
                // Set
                configComponente.setCapacidade(frequenciaInteger);
                configComponente.setUnidadeMedida("GHz");
                //insert
                conMysql.update("insert into ConfiguracaoComponente(fkMaquina, fkEmpresa, FkComponente,capacidade,unidadeMedida) values (?,?,?,?,?)",
                        maquina.getIdMaquina(),
                        maquina.getFkEmpresa(),
                        componente.getIdComponente(),
                        configComponente.getCapacidade(),
                        configComponente.getUnidadeMedida()
                );

                // Insert Tabela ConfiguracaoComponente Memoria
                //Tratando Dados
                Long memoriaTotal = looca.getMemoria().getTotal();
                Integer memoriaTotalInteger = (memoriaTotal.intValue() / 100000000);
                // Set
                componente.setIdComponente(3);
                configComponente.setCapacidade(memoriaTotalInteger);
                configComponente.setUnidadeMedida("GB");
                //insert
                conMysql.update("insert into ConfiguracaoComponente(fkMaquina, fkEmpresa, FkComponente,capacidade,unidadeMedida) values (?,?,?,?,?)",
                        maquina.getIdMaquina(),
                        maquina.getFkEmpresa(),
                        componente.getIdComponente(),
                        configComponente.getCapacidade(),
                        configComponente.getUnidadeMedida()
                );

//                // Insert Tabela Componente
//                insert into componente values(1,'Disco');
//                insert into componente values(2,'Processador');
//                insert into componente values(3,'Memoria');
//                conMysql.update("insert into Componente(tipoComponente, modelo) values (?,?)",
//                        componente.getTipoCompenente(),
//                        componente.getModelo()
//                );
                // Selects com Resultados
                // Tabela Maquina
                List< RegistroAtividade> registroAtividades = conMysql.query("select * from RegistroAtividade order by idRegistroUsuario asc",
                        new BeanPropertyRowMapper(RegistroAtividade.class));
                System.out.println(registroAtividades);

                // Tabela InfoMaquina
                List< InfoMaquina> infoMaquinas = conMysql.query("select * from InfoMaquina order by idInfoMaquina asc",
                        new BeanPropertyRowMapper(InfoMaquina.class));
                System.out.println(infoMaquinas);

                //Tabela Maquina e Empresa
                List<Maquina> maquinas = conMysql.query("select * from Maquina join Empresa on fkempresa=idempresa order by idMaquina asc",
                        new BeanPropertyRowMapper(Maquina.class));
                System.out.println(maquinas);

                EnviaDados inicio = new EnviaDados();
                inicio.iniciarEnvio();
            } else {
                // Erro
                ImageIcon icon = new ImageIcon(getClass().getResource("/assets/erro.png"));
                JOptionPane.showMessageDialog(null, "Login Inv√°lido",
                        "Erro", JOptionPane.INFORMATION_MESSAGE, icon);
            }

        } catch (Exception erro) {
            JOptionPane.showMessageDialog(null, "erro");
        }

//      O Loop dever√°ser inicializado aqui depois de todas as valida√ß√µes poss√≠veis
    }//GEN-LAST:event_btnLogarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginJframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Bacckground;
    private javax.swing.JButton btnLogar;
    private javax.swing.JPanel jFundoAzul;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelPatrimonio;
    private javax.swing.JLabel jLabelSenha;
    private javax.swing.JLabel jLoginTitulo;
    private javax.swing.JLabel jLogo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtPatrimonio;
    private javax.swing.JPasswordField txtSenha;
    // End of variables declaration//GEN-END:variables
}
